{"version":3,"sources":["componentes/AddCategory.js","helpers/getGifs.js","componentes/GifGridItem.js","componentes/Gif.js","hooks/useFetchGifs.js","GiftExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","console","log","useFetchGifs","GiftExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAe9C,OAEI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAO,IACzBR,GAAc,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACrCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCPlBG,EAAO,uCAAE,WAAMC,GAAN,uBAAAC,EAAA,6DACZC,EADY,iDACqCC,UAAUH,GAD/C,+DAECI,MAAMF,GAFP,cAEZG,EAFY,gBAGKA,EAAKC,OAHV,uBAGVC,EAHU,EAGVA,KAEFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATxB,kBAYXM,GAZW,4CAAF,sDCEPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEhC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAKA,QCFJO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KAiBtC,OAZAC,qBAAW,WACPxB,EAAQC,GAAUwB,MAAK,SAAAC,GAEnBC,QAAQC,IAAIF,GACZH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAInB,CAACpB,IAEIqB,EDbwBO,CAAc5B,GAAjCa,EAFyB,EAE9BN,KAAaa,EAFiB,EAEjBA,QAGpB,OACI,qCACI,oBAAIJ,UAAU,mCAAd,SAAmDhB,IAClDoB,GAAW,mBAAGJ,UAAU,mCAAb,yBACZ,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEdxBkB,EAAgB,WAAO,IAAD,EAEK3C,mBAAS,CAAC,kBAFf,mBAExB4C,EAFwB,KAEZ7C,EAFY,KAI/B,OACI,qCACI,+CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBACA,6BACK6C,EAAWrB,KAAK,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEIA,SAAWA,GADLA,Y,MCX9B+B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.96bf7b93.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputChange = (e) =>{\r\n        setInputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault();\r\n        if (inputValue.trim().length>2){\r\n            setCategories(cat => [inputValue, ...cat]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n    \r\n    return (\r\n        \r\n        <form onSubmit={ handleSubmit }>\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes={\r\n    setCategories:PropTypes.func.isRequired\r\n}","export const getGifs =async(category)=>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=kJ7x4nFps8vAuBPFtmvwnTyPtmRZ811p`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n    \r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n   \r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title}/>\r\n            <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    const {data:images, loading} = useFetchGifs( category );\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__flash\">{ category }</h3>\r\n            {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\r\n            <div className=\"card-grid\">\r\n                {\r\n                    images.map( img =>(\r\n                        <GifGridItem \r\n                            key={img.id}\r\n                            {...img }\r\n                            />\r\n                ))}\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n    useEffect( ()=>{\r\n        getGifs(category).then(imgs =>{\r\n\r\n            console.log(imgs);\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            })\r\n\r\n        })\r\n    },[category])\r\n\r\n    return state;\r\n}\r\n","import React, { useState } from 'react'\r\nimport { AddCategory } from './componentes/AddCategory'\r\nimport { GifGrid } from './componentes/Gif';\r\n\r\nexport const GiftExpertApp = () => {\r\n\r\n    const [categories, setCategories] = useState(['One Punch Man'])\r\n\r\n    return (\r\n        <>\r\n            <h2>GiftExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories }/>\r\n            <hr/>\r\n            <ol>\r\n                {categories.map( category =>\r\n                    <GifGrid\r\n                        key={ category }\r\n                        category={ category }/>\r\n                    \r\n                )}\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GiftExpertApp } from './GiftExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GiftExpertApp/>,\n  document.getElementById('root')\n);"],"sourceRoot":""}